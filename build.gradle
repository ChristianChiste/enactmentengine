buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}

plugins {
	id "com.palantir.docker" version "0.25.0"
	id "com.palantir.docker-run" version "0.25.0"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'at.enactmentengine.serverless'

description = "enactment-engine"

mainClassName = 'at.enactmentengine.serverless.main.Service'

repositories {
     maven { url "https://repo.maven.apache.org/maven2" }
}
dependencies {
    compile group: 'org.xerial', name: 'sqlite-jdbc', version:'3.30.1'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version:'2.8.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version:'2.8.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.8.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version:'2.8.5'
    compile group: 'com.google.code.gson', name: 'gson', version:'2.8.5'
    compile group: 'com.github.docker-java', name: 'docker-java', version:'3.0.14'
    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.4'
    compile group: 'javax.activation', name: 'activation', version:'1.1.1'
    compile group: 'org.slf4j', name: 'slf4j-simple', version:'1.6.1'
    compile group: 'com.amazonaws', name: 'aws-lambda-java-core', version:'1.1.0'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version:'1.11.327'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version:'1.11.327'
    compile group: 'com.cloudant', name: 'cloudant-client', version:'2.17.0'
    compile fileTree(dir: 'externalJars', include: ['*.jar'])
    testCompile group: 'junit', name: 'junit', version:'3.8.1'
}

shadowJar {
    baseName = 'enactment-engine-all'
    classifier = null
    version = null
}

task copyJar(type: Copy) {
    dependsOn   'shadowJar'
    from        "build/libs/enactment-engine-all.jar"
    into        './docker/Database/'
}

task copyDatabase(type: Copy) {
    mkdir "Database"
    from        "Database"
    include "**"
    into        './docker/Database'
}

task updateDocker(type: Copy) {
    dependsOn   'copyJar', 'copyDatabase'
}

docker {
	name "ee-service"
	dockerfile project.file('./docker/Dockerfile')
	files './docker/Database/enactment-engine-all.jar'
	copySpec.from("./Database").into("Database")
}

dockerRun {
	name "ee-service"
	image "ee-service"
	clean true
	arguments "--network=afclplatform"
}

task dockerupdate {
	dependsOn 'clean'
	dependsOn 'build'
	dependsOn 'copyJar'
	dependsOn 'docker'
	dependsOn 'dockerStop'
	dependsOn 'dockerRun'
	tasks.findByName('build').mustRunAfter 'clean'
	tasks.findByName('dockerRun').mustRunAfter 'dockerStop'
	tasks.findByName('dockerStop').mustRunAfter 'docker'
	tasks.findByName('docker').mustRunAfter 'copyJar'
	tasks.findByName('copyJar').mustRunAfter 'build'
}
